diff --git a/src/game.cpp b/src/game.cpp
index 7f5a31a..0081445 100644
--- a/src/game.cpp
+++ b/src/game.cpp
@@ -31,6 +31,9 @@ Game::Game() {
     lightingShader = LoadShader(0, "res/shaders/broken.frag");
   }

+  cursor.img = LoadImage("res/cursor.png");
+  cursor.tex = LoadTextureFromImage(cursor.img);
+
   brush.img = LoadImage("res/brush.png");
   brush.tex = LoadTextureFromImage(brush.img);
   brush.scale = 0.25;
@@ -39,6 +42,8 @@ Game::Game() {
   canvas.tex = LoadTextureFromImage(canvas.img);

   placeLights(&lights);
+
+  HideCursor();
 }

 void Game::update() {
@@ -50,14 +55,13 @@ void Game::update() {

   int lightsAmount = lights.size();
   SetShaderValue(lightingShader, GetShaderLocation(lightingShader, "uLightsAmount"), &lightsAmount, SHADER_UNIFORM_INT);
+  SetShaderValue(lightingShader, GetShaderLocation(lightingShader, "uCascadeAmount"), &cascadeAmount, SHADER_UNIFORM_INT);

   int apple = 0;
   #ifdef __APPLE__
     apple = 1;
   #endif
   SetShaderValue(lightingShader, GetShaderLocation(lightingShader, "uApple"), &apple, SHADER_UNIFORM_INT);
-
-  SetShaderValue(lightingShader, GetShaderLocation(lightingShader, "uCascadeAmount"), &cascadeAmount, SHADER_UNIFORM_INT);
   SetShaderValue(lightingShader, GetShaderLocation(lightingShader, "uSmoothShadows"), &smoothShadows, SHADER_UNIFORM_INT);
 }

@@ -76,12 +80,23 @@ void Game::render() {
     SetShaderValue(lightingShader, GetShaderLocation(lightingShader, TextFormat("lights[%i].size",     i)), &lights[i].size,     SHADER_UNIFORM_FLOAT);
     if (debug) DrawCircleLinesV(lights[i].position, lights[i].size/64, GREEN);
    }
+}
+
+void Game::renderUI() {
+  float v = GetTime() - timeSinceModeSwitch;
+  if (v > 1.0) v = 1.0;
+
+  std::string str = "DRAWING";
+  if (mode == LIGHTING)     str = "LIGHTING";
+  else if (mode == VIEWING) str = "VIEWING";
+
+  DrawText(str.c_str(), 0, SCREEN_HEIGHT - 8, 1, ColorFromHSV(0.0, 0.0, 1.0 - v));

   switch (mode) {
     case DRAWING:
       DrawTextureEx(brush.tex,
                     Vector2{ (float)(GetMouseX() - brush.img.width/2*brush.scale),
-                               (float)(GetMouseY() - brush.img.height/2*brush.scale) },
+                             (float)(GetMouseY() - brush.img.height/2*brush.scale) },
                     0.0,
                     brush.scale,
                     BLACK);
@@ -90,26 +105,42 @@ void Game::render() {
       DrawCircleLines(GetMouseX(), GetMouseY(), (brush.scale*1200)/64, ColorFromNormalized(Vector4{ std::sin(time), std::cos(time), 1.0, 1.0 }));
       break;
   }
-}

-void Game::renderUI() {
-  if (debug) {
-    DrawText(TextFormat("%i FPS",            GetFPS()),             0, 0,  1, GREEN);
-    DrawText(TextFormat("%i lights",         lights.size()),        0, 8,  1, GREEN);
-    if      (mode == DRAWING)  DrawText(TextFormat("%f brush scale",    brush.scale),    0, 32, 1, GREEN);
-    else if (mode == LIGHTING) DrawText(TextFormat("%f light size", brush.scale * 2400), 0, 32, 1, GREEN);
-    DrawText(TextFormat("%i cascades",       cascadeAmount),        0, 40, 1, GREEN);
-    if (smoothShadows) DrawText("smoothShadows ON", 0, 48, 1, GREEN);
-  }
+  #define CURSOR_SIZE 0.1
+
+  DrawTextureEx(cursor.tex,
+                Vector2{ (float)(GetMouseX() - cursor.img.width/2*CURSOR_SIZE),
+                         (float)(GetMouseY() - cursor.img.height/2*CURSOR_SIZE) },
+                0.0,
+                CURSOR_SIZE,
+                WHITE);
+
+  if (!debug) return;
+
+  DrawText(TextFormat("%i FPS",            GetFPS()),              0, 0,  1, GREEN);
+  DrawText(TextFormat("%i lights",         lights.size()),         0, 8,  1, GREEN);
+
+  if      (mode == DRAWING)  DrawText(TextFormat("%f brush scale", brush.scale),    0, 32, 1, GREEN);
+  else if (mode == LIGHTING) DrawText(TextFormat("%f light size",  brush.scale * 2400), 0, 32, 1, GREEN);
+
+  DrawText(TextFormat("%i cascades", cascadeAmount), 0, 40, 1, GREEN);
+  if (smoothShadows) DrawText("smoothShadows ON", 0, 48, 1, GREEN);
 }

 void Game::processKeyboardInput() {
-  if (IsKeyPressed(KEY_ONE))   mode = DRAWING;
-  if (IsKeyPressed(KEY_TWO))   mode = LIGHTING;
-  if (IsKeyPressed(KEY_THREE)) mode = VIEWING;
+  auto changeMode = [this](Mode m) {
+    mode = m;
+    timeSinceModeSwitch = GetTime();
+  };
+
+  if (IsKeyPressed(KEY_ONE))   changeMode(DRAWING);
+  if (IsKeyPressed(KEY_TWO))   changeMode(LIGHTING);
+  if (IsKeyPressed(KEY_THREE)) changeMode(VIEWING);

   if (IsKeyPressed(KEY_F3)) debug = !debug;
   if (IsKeyPressed(KEY_S))  (smoothShadows == 0) ? smoothShadows = 1 : smoothShadows = 0;
+
+  // clearing
   if (IsKeyPressed(KEY_C)) {
     switch (mode) {
       case DRAWING:
@@ -123,6 +154,8 @@ void Game::processKeyboardInput() {
         break;
     }
   }
+
+  // replacing
   if (IsKeyPressed(KEY_R)) {
     if (mode == DRAWING) {
       printf("Replacing canvas.\n");
@@ -136,6 +169,7 @@ void Game::processKeyboardInput() {
   }

   if (IsKeyDown(KEY_LEFT_CONTROL)) {
+    // reloading
     if (IsKeyPressed(KEY_R)) {
       printf("Reloading shaders.\n");
       UnloadShader(lightingShader);
@@ -149,7 +183,7 @@ void Game::processKeyboardInput() {
 }

 void Game::processMouseInput() {
-  if (IsKeyDown(KEY_LEFT_CONTROL)) {
+  if (IsKeyDown(KEY_LEFT_CONTROL) && debug) {
     int amp = 50;
     if (IsKeyDown(KEY_LEFT_SHIFT)) amp = 1;
     cascadeAmount += GetMouseWheelMove() * amp;
@@ -173,20 +207,20 @@ void Game::processMouseInput() {
         ImageDraw(&canvas.img,
                   brush.img,
                   Rectangle{ 0, 0, (float)canvas.img.width, (float)canvas.img.height },
-                  Rectangle{ static_cast<float>(GetMouseX() - brush.img.width/2*brush.scale),
-                               static_cast<float>(GetMouseY() - brush.img.height/2*brush.scale),
-                               static_cast<float>(brush.img.width * brush.scale),
-                               static_cast<float>(brush.img.height * brush.scale) },
+                  Rectangle{ static_cast<float>(GetMouseX() - brush.img.width/2 * brush.scale),
+                             static_cast<float>(GetMouseY() - brush.img.height/2 * brush.scale),
+                             static_cast<float>(brush.img.width * brush.scale),
+                             static_cast<float>(brush.img.height * brush.scale) },
                   BLACK);
         RELOAD_CANVAS();
       } else if (IsMouseButtonDown(1)) {
         ImageDraw(&canvas.img,
                   brush.img,
                   Rectangle{ 0, 0, (float)canvas.img.width, (float)canvas.img.height },
-                  Rectangle{ static_cast<float>(GetMouseX() - brush.img.width/2*brush.scale),
-                               static_cast<float>(GetMouseY() - brush.img.height/2*brush.scale),
-                               static_cast<float>(brush.img.width*brush.scale),
-                               static_cast<float>(brush.img.height*brush.scale) },
+                  Rectangle{ static_cast<float>(GetMouseX() - brush.img.width/2 * brush.scale),
+                             static_cast<float>(GetMouseY() - brush.img.height/2 * brush.scale),
+                             static_cast<float>(brush.img.width * brush.scale),
+                             static_cast<float>(brush.img.height * brush.scale) },
                   WHITE);
         RELOAD_CANVAS();
       }
@@ -196,7 +230,7 @@ void Game::processMouseInput() {
         Light l;
         l.position = Vector2{ static_cast<float>(GetMouseX()), static_cast<float>(GetMouseY()) };
         l.color    = Vector3{ std::sin(time), std::cos(time), 1.0 };
-        l.size     = brush.scale*1200;//std::abs(std::sin(time)) * 500 + 100;
+        l.size     = brush.scale * 1200;
         lights.push_back(l);
       } else if (IsMouseButtonDown(1)) {
         for (int i = 0; i < lights.size(); i++) {
diff --git a/src/game.h b/src/game.h
index 297e54c..c280270 100644
--- a/src/game.h
+++ b/src/game.h
@@ -30,15 +30,21 @@ class Game {

     bool debug;
     float time;
+    double timeSinceModeSwitch;

     std::vector<Light> lights;

-    enum {
+    enum Mode {
       DRAWING,
       LIGHTING,
       VIEWING
     } mode;

+    struct {
+      Image     img;
+      Texture2D tex;
+    } cursor;
+
     struct {
       Image     img;
       Texture2D tex;
diff --git a/src/main.cpp b/src/main.cpp
index f289408..ecafa4b 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -8,7 +8,7 @@ int main() {
   title += VERSION;

   InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, title.c_str());
-  SetTargetFPS(GetMonitorRefreshRate(0));
+  SetTargetFPS(GetMonitorRefreshRate(GetCurrentMonitor()));
   SetTraceLogLevel(LOG_ERROR);

   Game game;
